// Flawless-Semantics adapted by Sean Steindl from the Semantic.gs
///////////
// GRID SPECIFIC CALCULATIONS
//////////
// Utility variables - you should never need to modify these calculations
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;
@p-gridsystem-width: @gridsystem-width - @gutter-width;
// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;
// gutter widths for columns and rows
@column-gutter-width: @total-width*((@gutter-width)/@gridsystem-width);
@p-column-gutter-width: @total-width*(@gutter-width/@p-gridsystem-width);

//////////
// Grid //
//////////
// .widths mixin useful for making sure the widths are set correctly. When the grid is pixel based it uses the @x and @column values to work out the width and when it is percentage it uses @x as @min-width and @columns as  @max-width.
.widths(@x:@columns,@columns:@columns) {
	.mixin(@x,@columns){}
	.mixin(@x,@columns)  when (ispixel(@total-width))  {
		.column > .mixin(@x,@columns);
	}
	.mixin(@x:@min-width,@columns:@max-width)  when (ispercentage(@total-width))  {
		// mix the values around so it makes sense
		@min-width:@x;
		@max-width:@columns;
		min-width: @min-width;
		max-width: @max-width;
	}
	.mixin(@x,@columns);
}

// Note it is not usually a good idea to make the body a grid due to the use of  the overflow property... unless that is the effect you want. (eg. single page websites with a fixed header and where navigation is by anchors.)
.grid(@columns:@columns){
	.row(@columns);
	.mixin() {} // default value
	.mixin() when (@show-grid = true) {	
		.show-grid();
	}
	.mixin();
}

//////////
// ROWS //
//////////
// Margin-based rows
.row(@columns:@columns) {	
	display: block;
	overflow:hidden;
	.clearfix;
	.mixin(@columns:@columns)  when (ispixel(@total-width))  {
		width: @gridsystem-width;
		margin-left:@column-gutter-width* -1;
		}
	.mixin(@columns:@columns)  when (ispercentage(@total-width))  {
		width: @total-width + @p-column-gutter-width; // see below comment regarding @p-column-gutter-width
		margin-left:@column-gutter-width* -1; // Technically should be @p-column-gutter-width*-1 but browser rounding breaks the layout.
	}
	.mixin(@columns);
}

/////////////
// COLUMNS //
/////////////
// column - specified width
.column(@x,@columns:@columns) {
		display: inline;
		float: left;
		overflow:hidden;
		margin-right:0;
		margin-left: @column-gutter-width;
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box;
	.mixin(@x,@columns:@columns)  when (ispixel(@total-width))  {
		width: (((@gutter-width+@column-width)*@x)-@gutter-width)*1px
	}
	.mixin(@x,@columns:@columns)  when (ispercentage(@total-width))  {
		width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	}
	.mixin(@x,@columns);
}

/////////////////
// PUSH //
/////////////////

.push(@offset:1,@columns:@columns)  {
	.mixin(@offset:1,@columns:@columns)  when (ispixel(@total-width))  {
		@calculated-column-width: (((@gutter-width+@column-width)*@offset)-@gutter-width)*1px;
		padding-right: 0;
		margin-left: @calculated-column-width+(@column-gutter-width*2);
	}
	.mixin(@offset:1,@columns:@columns)  when (ispercentage(@total-width))  {
		@calculated-column-width: @total-width*((((@gutter-width+@column-width)*@offset)-@gutter-width) / @gridsystem-width);
		padding-right: 0;
		margin-left: @calculated-column-width+(@column-gutter-width*2);
	}
	.mixin(@offset,@columns);
}